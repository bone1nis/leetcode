/*
289. Игра в жизнь
Решено
Середина
Темы
Компании
Согласно статье Википедии : « Игра «Жизнь» , также известная просто как Жизнь , — клеточный автомат, изобретенный британским математиком Джоном Хортоном Конвеем в 1970 году».

Доска состоит из m x nсетки ячеек, где каждая ячейка имеет начальное состояние: живая (представленная как 1) или мертвая (представленная как 0). Каждая ячейка взаимодействует со своими восемью соседями (по горизонтали, вертикали, диагонали) с использованием следующих четырех правил (взятых из вышеуказанной статьи Википедии):

Любая живая клетка, имеющая менее двух живых соседей, погибает, как будто из-за недостаточной численности населения.
Любая живая клетка с двумя или тремя живыми соседями продолжает жить в следующем поколении.
Любая живая клетка, имеющая более трех живых соседей, погибает, как будто из-за перенаселения.
Любая мертвая клетка, имеющая ровно три живых соседа, становится живой клеткой, как будто путем размножения.
Следующее состояние доски определяется путем применения вышеуказанных правил одновременно к каждой ячейке в текущем состоянии сетки m x n. boardВ этом процессе рождение и смерть происходят одновременно .

Учитывая текущее состояние board, обновите , boardчтобы отразить его следующее состояние.

Обратите внимание , что вам не нужно ничего возвращать.

 

Пример 1:


Вход: доска = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
 Выход: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
Пример 2:


Вход: доска = [[1,1],[1,0]]
 Выход: [[1,1],[1,1]]
 

Ограничения:

m == board.length
n == board[i].length
1 <= m, n <= 25
board[i][j]это 0или 1.
*/


function gameOfLife(board) {
    let newBoard = board.map(() => []);

    for (let r = 0; r < board.length; r++) {
        for (let c = 0; c < board[r].length; c++) {
            let countOne = 0;

            if (r > 0) {
                countOne += board[r - 1][c];
                if (c > 0) countOne += board[r - 1][c - 1];
                if (c < board[r].length - 1) countOne += board[r - 1][c + 1];
            }

            if (r < board.length - 1) {
                countOne += board[r + 1][c];
                if (c > 0) countOne += board[r + 1][c - 1];
                if (c < board[r].length - 1) countOne += board[r + 1][c + 1];
            }

            if (c > 0) countOne += board[r][c - 1];
            if (c < board[r].length - 1) countOne += board[r][c + 1];

            if ((board[r][c] === 1 && countOne < 2) || (board[r][c] === 1 && countOne > 3)) {
                newBoard[r].push(0);
            } else if (
                board[r][c] === 1 &&
                (countOne === 3 || countOne === 2)
            ) {
                newBoard[r].push(1);
            } else if (board[r][c] === 0 && countOne === 3) {
                newBoard[r].push(1);
            } else {
                newBoard[r].push(board[r][c]);
            }
        }
    }

    for (let r = 0; r < board.length; r++) {
        for (let c = 0; c < board[r].length; c++) {
            board[r][c] = newBoard[r][c];
        }
    }
}
