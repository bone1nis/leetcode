/*


12. Целые числа в римские числа
Решено
Середина
Темы
Компании
Семь различных символов представляют римские цифры со следующими значениями:

Символ	Ценить
я	1
В	5
Х	10
Л	50
С	100
Д	500
М	1000
Римские цифры образуются путем добавления преобразований значений десятичных знаков от самого высокого к самому низкому. Преобразование значения десятичного знака в римское число имеет следующие правила:

Если значение не начинается с 4 или 9, выберите символ максимального значения, которое можно вычесть из входных данных, добавьте этот символ к результату, вычтите его значение и преобразуйте остаток в римскую цифру.
Если значение начинается с 4 или 9, используйте  субтрактивную форму  , представляющую один символ, вычитаемый из следующего символа, например, 4 на 1 ( I) меньше 5 ( V): IV и 9 на 1 ( I) меньше 10 ( X): IX. Используются только следующие субтрактивные формы: 4 ( IV), 9 ( IX), 40 ( XL), 90 ( XC), 400 ( CD) и 900 ( CM).
Только степени 10 ( I, X, C, M) могут быть добавлены последовательно не более 3 раз для представления кратных 10. Вы не можете добавить 5 ( V), 50 ( L) или 500 ( D) несколько раз. Если вам нужно добавить символ 4 раза, используйте вычитательную форму .
Дано целое число, преобразуйте его в римскую цифру.*/

const map = new Map([
    [1, "I"],
    [4, "IV"],
    [5, "V"],
    [9, "IX"],
    [10, "X"],
    [40, "XL"],
    [50, "L"],
    [90, "XC"],
    [100, "C"],
    [400, "CD"],
    [500, "D"],
    [900, "CM"],
    [1000, "M"]
]);

function intToRoman(num: number): string {

    let newNum = num;
    let result = "";

    while (newNum !== 0) {
        if (newNum >= 1000) {
            result += map.get(1000);
            newNum -= 1000;
        }
        else if (newNum >= 900) {
            result += map.get(900);
            newNum -= 900;
        }
        else if (newNum >= 500) {
            result += map.get(500);
            newNum -= 500;
        }
        else if (newNum >= 400) {
            result += map.get(400);
            newNum -= 400;
        }
        else if (newNum >= 100) {
            result += map.get(100);
            newNum -= 100;
        }
        else if (newNum >= 90) {
            result += map.get(90);
            newNum -= 90;
        }
        else if (newNum >= 50) {
            result += map.get(50);
            newNum -= 50;
        }
        else if (newNum >= 40) {
            result += map.get(40);
            newNum -= 40;
        }
        else if (newNum >= 10) {
            result += map.get(10);
            newNum -= 10;
        }
        else if (newNum >= 9) {
            result += map.get(9);
            newNum -= 9;
        }
        else if (newNum >= 5) {
            result += map.get(5);
            newNum -= 5;
        }
        else if (newNum >= 4) {
            result += map.get(4);
            newNum -= 4;
        }
        else if (newNum >= 1) {
            result += map.get(1);
            newNum -= 1;
        }
    }

    return result;
};

// v2 


const map = new Map([
    [1000, "M"],
    [900, "CM"],
    [500, "D"],
    [400, "CD"],
    [100, "C"],
    [90, "XC"],
    [50, "L"],
    [40, "XL"],
    [10, "X"],
    [9, "IX"],
    [5, "V"],
    [4, "IV"],
    [1, "I"],
]);

function intToRoman(num: number): string {
    let result = "";

    for (const [value, symb] of map) {
        while (num >= value) {
            result += symb;
            num -= value;
        }
    }

    return result;
}