/*
36. Действительный судоку
Решено
Середина
Темы
Компании
Определите,  9 x 9является ли доска судоку действительной. Только заполненные ячейки должны быть проверены  в соответствии со следующими правилами :

Каждая строка должна содержать цифры  1-9без повторений.
Каждый столбец должен содержать цифры  1-9 без повторений.
Каждая из девяти  3 x 3ячеек сетки должна содержать цифры  1-9 без повторений.
Примечание:

Доска судоку (частично заполненная) может быть допустимой, но не обязательно решаемой.
Только заполненные ячейки необходимо проверить в соответствии с указанными правилами.
 

Пример 1:


Вход: доска =
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Вывод: истина
Пример 2:

Вход: доска =
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Вывод: false
 Объяснение: То же, что и в примере 1, за исключением того, что 5 в верхнем левом углу изменена на 8. Поскольку в верхнем левом подполе 3x3 есть две восьмерки, это недопустимо.
 

Ограничения:

board.length == 9
board[i].length == 9
board[i][j]это цифра 1-9или '.'.
*/


function isValidSudoku(board: string[][]): boolean {
    const rows = new Map();
    const columns = new Map();
    const squares = new Map();

    for(let i = 0; i < board.length; i++) {
        for (let c = 0; c < board[i].length; c++) {
            const val = board[i][c];
            const rowId = `row${i}`;
            const colId = `col${c}`;
            const squareId = `square${(i - (i % 3)) + (c - (c % 3)) / 3}`;

            if (val !== ".") {
                const prevRowItems = rows.get(rowId) || [];
                const prevColItems = columns.get(colId) || [];
                const prevSquareItems = squares.get(squareId) || [];

                if (prevRowItems.some(item => item === val)) return false;
                if (prevColItems.some(item => item === val)) return false;
                if (prevSquareItems.some(item => item === val)) return false;

                rows.set(rowId, [...prevRowItems, val]);
                columns.set(colId, [...prevColItems, val]);
                squares.set(squareId, [...prevSquareItems, val]);
            }
        }
    }

    return true;
};
